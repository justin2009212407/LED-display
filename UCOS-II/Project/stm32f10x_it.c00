/**
  ******************************************************************************
  * @file    Project/STM32F10x_StdPeriph_Template/stm32f10x_it.c 
  * @author  MCD Application Team
  * @version V3.5.0
  * @date    08-April-2011
  * @brief   Main Interrupt Service Routines.
  *          This file provides template for all exceptions handler and 
  *          peripherals interrupt service routine.
  ******************************************************************************
  * @attention
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "stm32f10x_it.h"
#include "ucos_ii.h"

#define BUFFER_LEN_MAX 64
#define TxBufferSize   (countof(TxBuffer) - 1)
#define RxBufferSize   0x20
/* Private macro -------------------------------------------------------------*/
#define countof(a)   (sizeof(a) / sizeof(*(a)))

//unsigned char sbuff[16];
unsigned char in_buffer[BUFFER_LEN_MAX],in_buffer_p=0;
unsigned char           GucRcvBuf[10] ;                                       /* 串口接收数据缓冲区           */
int          GulNum;                                               /* 串口接收数据的个数           */

extern unsigned char GucRcvNew;
extern unsigned char led_mess[16]; //oldP1Stat;
extern unsigned char write_flash,triggle_serial,command;


/* Private variables ---------------------------------------------------------*/  
u8 TxBuffer[] = "\n\rUSART Example2: USART-Hyperterminal communication using Interrupt\n\r";
u8 RxBuffer[RxBufferSize];
//u8 NbrOfDataToTransfer = TxBufferSize;
//u8 NbrOfDataToRead = RxBufferSize;
u8 TxCounter = 0; 
u16 RxCounter = 0; 


/** @addtogroup STM32F10x_StdPeriph_Template
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

/******************************************************************************/
/*            Cortex-M3 Processor Exceptions Handlers                         */
/******************************************************************************/

/**
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}

/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}

/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}

/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
/*void PendSV_Handler(void)
{
}*/

/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
	OS_CPU_SR  cpu_sr;


    OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
    OSIntNesting++;
    OS_EXIT_CRITICAL();

    OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */

    OSIntExit(); 
}

/******************************************************************************/
/*                 STM32F10x Peripherals Interrupt Handlers                   */
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f10x_xx.s).                                            */
/******************************************************************************/

/******************************************************************************/
/*                 STM32F10x Peripherals Interrupt Handlers                   */
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f10x_xx.s).                                            */
/******************************************************************************/

void USART2_IRQHandler(void)
{
	/*u8 c;
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
	{ 	
	    c=USART2->DR;
  // 	  	printf("%c",c);    //将接受到的数据直接返回打印
		if(c==0x96)
			LED1(ON);
	} 
	*/
	unsigned char i=0;
  if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
  {
    /* Read one byte from the receive data register */
    RxBuffer[RxCounter] = (USART_ReceiveData(USART2) & 0xFF);         
    in_buffer[in_buffer_p]= RxBuffer[RxCounter]; //U3RBR;
		RxCounter++;
    if(in_buffer[in_buffer_p]=='E' && in_buffer[(in_buffer_p+BUFFER_LEN_MAX-19)%BUFFER_LEN_MAX]=='S' && in_buffer[(in_buffer_p+BUFFER_LEN_MAX-1)%BUFFER_LEN_MAX]=='\0')
    {
     triggle_serial=1;
     for(i=0;i<16;i++) led_mess[i]=in_buffer[(in_buffer_p+BUFFER_LEN_MAX-17+i)%BUFFER_LEN_MAX];
		 command=in_buffer[(in_buffer_p+BUFFER_LEN_MAX-18)%BUFFER_LEN_MAX];
		 GucRcvNew = 1;                                          //  置接收新数据标志            
     GucRcvBuf[GulNum] = '1';
    }
    if(in_buffer[in_buffer_p]=='E' && in_buffer[(in_buffer_p+BUFFER_LEN_MAX-19)%BUFFER_LEN_MAX]=='W' && in_buffer[(in_buffer_p+BUFFER_LEN_MAX-18)%BUFFER_LEN_MAX]=='R' && in_buffer[(in_buffer_p+BUFFER_LEN_MAX-17)%BUFFER_LEN_MAX]=='I' && in_buffer[(in_buffer_p+BUFFER_LEN_MAX-16)%BUFFER_LEN_MAX]=='T')
    {
     write_flash=1;
     //GucRcvNew = 1;                                          //  置接收新数据标志            
     GucRcvBuf[GulNum] = 'W';
    }
    in_buffer_p++;
    if(in_buffer_p==BUFFER_LEN_MAX) in_buffer_p=0;
    /* Clear the USART2 Receive interrupt */

    USART_ClearITPendingBit(USART2, USART_IT_RXNE);
    /*
    if(RxCounter == NbrOfDataToRead)
    {
      // Disable the USART Receive interrupt 
      USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);
    }
		*/
  }

  if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)
  {   
    /* Write one byte to the transmit data register */
    USART_SendData(USART2, TxBuffer[TxCounter++]);                    

    /* Clear the USART1 transmit interrupt */
    USART_ClearITPendingBit(USART2, USART_IT_TXE); 
    /*
    if(TxCounter == NbrOfDataToTransfer)
    {
      Disable the USART1 Transmit interrupt 
      USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    } 
    */		
  }  	
}

/**
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
/*void PPP_IRQHandler(void)
{
}*/

/**
  * @}
  */ 


/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
