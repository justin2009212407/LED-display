/************* STM32f103RBT6 ****************
* Filename   : main.c
* Author     : hurongbo(hurongbo@foxmail.com)
* Date       : 2012/12/8
********************************************/
#include "includes.h"


#define SH_LAT_H GPIO_SetBits(GPIOB, GPIO_Pin_5)   //FIO0SET = (1<<3)
#define SH_LAT_L GPIO_ResetBits(GPIOB, GPIO_Pin_5) //FIO0CLR = (1<<3)
#define LINE_A_H GPIO_SetBits(GPIOB, GPIO_Pin_7)   //FIO0SET = (1<<6)
#define LINE_A_L GPIO_ResetBits(GPIOB, GPIO_Pin_7) //FIO0CLR = (1<<6)
#define LINE_B_H GPIO_SetBits(GPIOB, GPIO_Pin_8)   //FIO0SET = (1<<7)
#define LINE_B_L GPIO_ResetBits(GPIOB, GPIO_Pin_8) //FIO0CLR = (1<<7)
#define LINE_C_H GPIO_SetBits(GPIOB, GPIO_Pin_9)   //FIO0SET = (1<<8)
#define LINE_C_L GPIO_ResetBits(GPIOB, GPIO_Pin_9) //FIO0CLR = (1<<8)
#define OE_H     GPIO_SetBits(GPIOB, GPIO_Pin_6)   //FIO1SET = (1<<29)
#define OE_L     GPIO_ResetBits(GPIOB, GPIO_Pin_6) //FIO1CLR = (1<<29)
#define RDAT_U_H GPIO_SetBits(GPIOC, GPIO_Pin_2)   //FIO2SET = (1<<1)
#define RDAT_U_L GPIO_ResetBits(GPIOC, GPIO_Pin_2) //FIO2CLR = (1<<1)
#define RDAT_D_H GPIO_SetBits(GPIOC, GPIO_Pin_1)   //FIO2SET = (1<<2)
#define RDAT_D_L GPIO_ResetBits(GPIOC, GPIO_Pin_1) //FIO2CLR = (1<<2)
#define SCLK_H   GPIO_SetBits(GPIOA, GPIO_Pin_8)   //FIO4SET = (1<<28)
#define SCLK_L   GPIO_ResetBits(GPIOA, GPIO_Pin_8) //FIO4CLR = (1<<28)

//#define LEDC1  (*((unsigned char *)0x2000)) //Led init message,can be rewrite
#define LEDC1  (*((unsigned char *)0x8004000)) //Led init message,can be rewrite
#define BUFFER_LEN_MAX 64


static OS_STK startup_task_stk[STARTUP_TASK_STK_SIZE];
static OS_STK led1_task_stk[LED1_TASK_STK_SIZE];

unsigned char GucRcvNew = 0;
//volatile unsigned char    GucRcvNew;                                            /* 串口接收新数据的标志         */
//unsigned char           GucRcvBuf[10] ;                                       /* 串口接收数据缓冲区           */
//int          GulNum;                                               /* 串口接收数据的个数           */


unsigned char count=0,write_flash=0,triggle_serial=0,refresh_init_string=0,command=0xff;
unsigned char led_mess[16]; //oldP1Stat;
unsigned char led_bits[2][16][16]; //两行字，每行16个字节，每字节高16点阵。（分四次扫描）左上角坐标原点（低字节，0位），
unsigned char hello[6]={'H','e','l','l','o','!'},hello_p=0;
unsigned char led_pre_bits[2][16][16];
//Uint8 led_bits[2][16][16];
unsigned char init_string[32][16]=
{
 {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
 {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
 {0xFF,0x80,0xFE,0xFE,0xFE,0xFE,0xFE,0xC0,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0x00,0xFF},
 {0xF7,0x03,0xFF,0xFF,0xFF,0xFF,0xEF,0x07,0xFF,0xFF,0xBF,0xCF,0xEF,0xFB,0x01,0xFF},
 {0xBF,0xC8,0xED,0xFE,0x7F,0x9E,0xDC,0xF7,0xEF,0xD8,0x1F,0xC0,0xDF,0xDE,0xDD,0xD3},
 {0xE3,0x1F,0xB7,0xAF,0x7F,0xEF,0x07,0xBF,0x7B,0x03,0xBF,0x01,0x5F,0xEF,0xF1,0xFB},
 {0xFD,0xFD,0x80,0xFB,0xF6,0xEE,0xDE,0xC0,0xFE,0xFE,0x00,0xFE,0xFE,0xFE,0xFE,0xFE},
 {0xFF,0xF7,0x03,0xFF,0xFF,0xFF,0xDF,0x0F,0xFF,0xFB,0x01,0xFF,0xFF,0xFF,0xFF,0xFF},
 {0xEF,0xEF,0xEF,0xEF,0x02,0xED,0xCA,0xCF,0xA7,0xA9,0x6E,0xEE,0xEE,0xEF,0xE0,0xEF},
 {0xBF,0xBF,0x5F,0x5F,0xEF,0xF1,0x0B,0xFF,0xBF,0xB7,0xB3,0xB7,0xAF,0xFB,0x01,0xFF},
 {0xFE,0xFE,0xFE,0x80,0xBE,0xBE,0xBE,0xBE,0x80,0xBE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE},
 {0xFF,0xFF,0xFB,0x01,0xFB,0xFB,0xFB,0xFB,0x03,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
 {0xFD,0xFE,0xFF,0xFF,0xF7,0xF7,0xD7,0xD7,0xD7,0xB7,0x77,0xF7,0xF7,0xF7,0xF8,0xFF},
 {0xFF,0xFF,0x7F,0x3F,0x7F,0xFF,0xF7,0xFB,0xFD,0xFD,0xFD,0xFF,0xEF,0xEF,0x0F,0xFF},
 {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
 {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
 {0xFF,0xFF,0xE1,0xF3,0xF9,0xF8,0xFC,0xFE,0xFE,0xFC,0xF9,0xFB,0xF7,0xE3,0xFF,0xFF},
 {0xFF,0xFF,0xE3,0xF7,0xE7,0xCF,0x9F,0x3F,0x3F,0x9F,0x9F,0xCF,0xE7,0xC3,0xFF,0xFF},
 {0xFF,0xFF,0xF8,0xF3,0xE7,0xE7,0xF1,0xFC,0xFF,0xFF,0xFF,0xEF,0xE3,0xE8,0xFF,0xFF},
 {0xFF,0xFF,0x17,0xE7,0xF7,0xFF,0xFF,0x1F,0xCF,0xE7,0xE7,0xE7,0xCF,0x3F,0xFF,0xFF},
 {0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC7,0xE7,0xF0,0xFF,0xFF},
 {0xFF,0xFF,0x1F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0xFF,0xFF},
 {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
 {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
 {0xFF,0xFF,0xC3,0xE7,0xE7,0xE7,0xF3,0xF3,0xF3,0xF9,0xF9,0xFD,0xFC,0xFE,0xFF,0xFF},
 {0xFF,0xFF,0xE3,0xF7,0xF7,0xEF,0xEF,0xDF,0xDF,0xBF,0xBF,0x7F,0x7F,0xFF,0xFF,0xFF},
 {0xFF,0xFF,0xF8,0xF3,0xE7,0xE7,0xF1,0xFC,0xFF,0xFF,0xFF,0xEF,0xE3,0xE8,0xFF,0xFF},
 {0xFF,0xFF,0x17,0xE7,0xF7,0xFF,0xFF,0x1F,0xCF,0xE7,0xE7,0xE7,0xCF,0x3F,0xFF,0xFF},
 {0xFF,0xFF,0xC0,0xCE,0xDE,0xDE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFC,0xFF,0xFF},
 {0xFF,0xFF,0x03,0x73,0x7B,0x7B,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x3F,0xFF,0xFF},
 {0xFF,0xFF,0xE0,0xF3,0xF3,0xF3,0xF3,0xF0,0xF3,0xF3,0xF3,0xF3,0xF3,0xE0,0xFF,0xFF},
 {0xFF,0xFF,0x07,0xE7,0xF7,0xFF,0xDF,0x1F,0xDF,0xFF,0xFF,0xF7,0xE7,0x07,0xFF,0xFF}
};


void shift_bits(unsigned char line)
{
 int i,j,k;
 SH_LAT_L;
 for(i=0;i<16;i++)
 for(j=3;j>=0;j--)
 for(k=7;k>=0;k--)
 {
  SCLK_L;
  if(led_bits[0][i][(j<<2)+line]&(1<<k))  RDAT_U_H;
  else                                    RDAT_U_L;
  if(led_bits[1][i][(j<<2)+line]&(1<<k))  RDAT_D_H;
  else                                    RDAT_D_L;
  //delay(2);
  SCLK_H;
  //delay(2);  
 }
 OE_L;
 for(i=0;i<20;i++);
 //delayNS(1);
 SH_LAT_H;//ENABLE SHIFT BITS.
}

void light_line(unsigned char line)
{
 if(line&1)	LINE_A_H;
 else       LINE_A_L;

 if(line&2)	LINE_B_H;
 else       LINE_B_L;

 OE_H;
}

static void SysTick_Init()
{
	//Set AHB clock as SysTick clock source
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
	//System clock:72M,time 1ms
	SysTick_Config(72000);
}

static void led1_task(void *p_arg)
{
 unsigned int i,j,k;
 int ticks=0;
 unsigned char line=0;
 unsigned char running=1;

 p_arg=p_arg;
 
 OE_L;//LED ALL BLACK. VERY IMPORTANT!!! ELSE CPU DEAD BECAUSE OF LESS VOLTAGE.
 USART_SendData(USART2, 'P'); //TxBuffer[TxCounter++]);
 for(i=0;i<512;i++)
 {
  if(*(&LEDC1+i)!=0xff) 
  {
   refresh_init_string=1;
   i=511;//ready exit.
  }
 }

 if(refresh_init_string)
 {
  for(i=0;i<32;i++)
  for(j=0;j<16;j++)
  init_string[i][j]=*(&LEDC1+(i<<4)+j);
 }
	 
 for(i=0;i<2;i++)
 for(j=0;j<16;j++)
 for(k=0;k<16;k++)
 led_pre_bits[i][j][k]=init_string[(i<<4)+j][k];


 for(i=0;i<2;i++)
 for(j=0;j<16;j++)
 for(k=0;k<16;k++)  
 {
  led_bits[i][j][k]=init_string[(i<<4)+j][k];//ticks; //if 0xff LED 屏全黑内容。
  ticks++;
 }

 while (running)
 {
  if (GucRcvNew == 1)
  {                                           /* 判断是否有新数据             */
   GucRcvNew = 0;                                              /* 清除标志                     */
   //uart3SendStr (GucRcvBuf, GulNum);                           /* 向串口发送数据               */
   //uart3SendStr (GucRcvBuf, 1);   
   //fputc('A',USART2);                                                           /* 向串口发送数据               */
	 USART_SendData(USART2, '1'); //TxBuffer[TxCounter++]);
  }
  if(write_flash)
  {
   //extern void Program_One_Sector_512W (WORD * Src, WORD * Dst)		 
   //Program_One_Sector_512W (led_pre_bits, &LEDC1);	
	 write_flash=0;
	 //Init(); //Ready for flash.	 
   //EraseSector ((unsigned long)(&LEDC1)); 
   //ProgramPage ((unsigned long)(&LEDC1), 512, (unsigned char *)led_pre_bits);
   //targetInit();          /*再次初始化目标板（时钟），切勿删除       */
	 //UnInit();
   //uart3SendStr (GucRcvBuf, 1);                           /* 向串口发送数据               */
	 USART_SendData(USART2, 'W');
   //UART_RSET(URTHR,0x57);
  }
  //triggle=0; 
  //移位一扫码。
  shift_bits(line);
  //点亮一扫码
  light_line(line);
  line=(line+1)&3;
  //delayNS(1);
  //delay(1000);
  if(triggle_serial)
  {
   triggle_serial=0;
   switch(command)
   {
    case  0xff:
	   for(i=0;i<2;i++)
     for(j=0;j<16;j++)
     for(k=0;k<16;k++)  
     {
      led_pre_bits[i][j][k]=0xff; //if 0xff LED 屏全黑内容。
     }
	   break;
	  case  0xfe:
	   for(i=0;i<1;i++)
     for(j=0;j<16;j++)
     for(k=0;k<16;k++)  
     {
      led_pre_bits[i][j][k]=0xff; //if 0xff LED 屏全黑内容。
     }
	   break;
	  case  0xfd:
     for(i=1;i<2;i++)
     for(j=0;j<16;j++)
     for(k=0;k<16;k++)  
     {
      led_pre_bits[i][j][k]=0xff; //if 0xff LED 屏全黑内容。
     }
	   break;
	  default:
     for(k=0;k<16;k++)  
     {
	    led_pre_bits[command>>4][command&0xf][k]=led_mess[k]; //if 0xff LED 屏全黑内容。
	   }
	   break;
   }
	 for(i=0;i<2;i++)
   for(j=0;j<16;j++)
   for(k=0;k<16;k++)
   led_bits[i][j][k]=led_pre_bits[i][j][k];
   OSTimeDlyHMSM(0,0,0,50);
  }
 }
 //return TRUE;
}

	/*
	while(1)
	{
		led_on(LED1);
		OSTimeDlyHMSM(0,0,0,50);
		led_off(LED1);
		OSTimeDlyHMSM(0,0,0,50);
	}
	*/


static void startup_task(void *p_arg)
{
	SysTick_Init();
	
	#if (OS_TASK_STAT_EN>0)
		OSStatInit();
	#endif
	
	OSTaskCreate(led1_task,(void *)0,
				&led1_task_stk[LED1_TASK_STK_SIZE-1],
				LED1_TASK_PRIO);

	while(1)
	{
		//led_on(LED2);
		OSTimeDlyHMSM(0,0,2,0);
		//led_off(LED2);
		OSTimeDlyHMSM(0,0,2,0);
	}	
}

int main()
{
	BSP_Init();
	OSInit();

	OSTaskCreate(startup_task,(void *)0,
				&startup_task_stk[STARTUP_TASK_STK_SIZE-1],
				STARTUP_TASK_PRIO);

	OSStart();
	return 0;
}

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif
